#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import cmk.base.plugins.agent_based.ntp as ntp

ntp_default_levels = (10, 200.0, 500.0)  # stratum, ms offset

factory_settings["ntp_time_default_levels"] = {
    "ntp_levels": ntp_default_levels,
    "alert_delay": (300, 3600),
}

# Example output from agent:
# <<<ntp>>>
# - 42.202.61.100   .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# * 42.202.62.100   .PPS.            1 u  143  256  377    0.763   -1.424   0.404
# % 42.202.61.14    42.202.62.100    2 u  160  256  357    0.058   -1.532   1.181
# % 42.202.62.14    42.202.62.100    2 u  194  256  357    0.131   -1.364   0.598
# % 42.202.61.10    .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# % 42.202.62.10    .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# + 42.202.61.15    42.202.62.100    2 u  196  256  356    0.058    0.574   0.204
# + 42.202.62.15    42.202.62.100    2 u  186  256  276    0.088    0.716   0.165
# % 127.127.1.0     .LOCL.          10 l   40   64  377    0.000    0.000   0.001

ntp_state_codes = {
    'x': "falsetick",
    '.': "excess",
    '-': "outlyer",
    '+': "candidat",
    '#': "selected",
    '*': "sys.peer",
    'o': "pps.peer",
    '%': "discarded",
}

# possible values: "summary", "detailed", "both", None
ntp_inventory_mode = "summary"


# We monitor all servers we have reached at least once
def inventory_ntp(parsed):
    if ntp_inventory_mode not in ["detailed", "both"]:
        return

    for peer in parsed.values():
        if peer.reach != "0" and peer.refid != '.LOCL.':
            yield peer.name, "ntp_default_levels"


def inventory_ntp_summary(parsed):
    if ntp_inventory_mode in ["summary", "both"] and parsed:
        yield None, {}


def ntp_fmt_time(raw: str) -> int:
    if raw == '-':
        return 0
    if raw[-1] == "m":
        return int(raw[:-1]) * 60
    if raw[-1] == "h":
        return int(raw[:-1]) * 60 * 60
    if raw[-1] == "d":
        return int(raw[:-1]) * 60 * 60 * 24
    return int(raw)


# Helper function that parses the information about one
# peer and returns a tuple of
# 0. Nagios state (0, 1, 2 or 3)
# 1. Nagios check output text
# 2. The offset (only if state != 3)
# 3. The jitter (only if state != 3)
def check_ntp_server_state(peer: ntp.Peer, params):
    jitter = float(peer.jitter)

    when = ntp_fmt_time(peer.when)
    stratum = int(peer.stratum)
    state = ntp_state_codes.get(peer.statecode, "unknown")
    infotext = "%s - stratum %d, jitter %.2f ms" % (state, stratum, jitter)
    if when > 0:
        infotext += ", last reached %d secs ago" % when

    crit_stratum, _warn, _crit = params
    if state in ["falsetick"]:
        return (2, infotext, jitter)
    if stratum >= crit_stratum:
        return (2,
                infotext + (", stratum is too high (max allowed is %d)(!!)" % (crit_stratum - 1)))

    # The following check in some cases produces false alarms. The poll interval can
    # switch back to a low value while 'when' still being at a high value. While
    # this happens only for a short time, it will make the check alarm. So we
    # rather switch this condition off:
    # elif when > 2*poll and when > 128: # when can exceed poll for small polling values
    #     return (3, "response due since %d secs%s" % (when - poll, infotext), offset, jitter)

    return (0, infotext, jitter)


def check_ntp(item, params, parsed: ntp.Section):
    peer = parsed.get(item)
    if peer is None:
        return
    if peer.reach == "0":
        yield 3, f"Peer {peer.name} is unreachable"
        return

    _crit_stratum, warn, crit = params
    yield check_levels(
        peer.offset,
        "offset",
        (warn, crit, -warn, -crit),
        human_readable_func=lambda f: "%.4f ms" % f,
        infoname="Offset",
    )

    state = check_ntp_server_state(peer, params)
    if len(state) == 3:
        state, text, jitter = state  # pylint: disable=unbalanced-tuple-unpacking
        perfdata = [("jitter", jitter, warn, crit, 0, None)]
    else:
        state, text = state
        perfdata = []

    yield state, text, perfdata


def check_ntp_summary(_no_item, params, parsed):
    # We only are interested in our system peer or pulse per second source (pps)
    peer = parsed.get(None)
    if peer is None:
        if parsed:
            yield 0, "Found %d peers, but none is suitable" % len(parsed)
        yield from tolerance_check(
            set_sync_time=None,
            levels=params.get("alert_delay"),
            notice_only=False,
        )
        return

    if isinstance(params, tuple):
        params = {
            "ntp_levels": params,
            "alert_delay": (300, 3600),
        }

    yield from check_ntp(peer.name, params["ntp_levels"], parsed)
    yield from tolerance_check(
        set_sync_time=time.time(),
        levels=params.get("alert_delay"),
        notice_only=True,
    )
    yield 0, f"\nSynchronized on {peer.name}"


check_info["ntp"] = {
    # there's a section against the new API defined!
    'check_function': check_ntp,
    'inventory_function': inventory_ntp,
    'service_description': 'NTP Peer %s',
    'has_perfdata': True,
    'group': 'ntp_peer',
}

check_info["ntp.time"] = {
    # there's a section against the new API defined!
    'check_function': check_ntp_summary,
    'inventory_function': inventory_ntp_summary,
    'service_description': 'NTP Time',
    'has_perfdata': True,
    'group': 'ntp_time',
    'default_levels_variable': "ntp_time_default_levels",
    'includes': ["time.include"]
}
