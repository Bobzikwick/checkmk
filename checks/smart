#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import
# EXAMPLE DATA FROM: WDC SSC-D0128SC-2100
#<<<smart>>>
#/dev/sda ATA WDC_SSC-D0128SC-   1 Raw_Read_Error_Rate     0x000b   100   100   050    Pre-fail  Always       -       16777215
#/dev/sda ATA WDC_SSC-D0128SC-   3 Spin_Up_Time            0x0007   100   100   050    Pre-fail  Always       -       0
#/dev/sda ATA WDC_SSC-D0128SC-   5 Reallocated_Sector_Ct   0x0013   100   100   050    Pre-fail  Always       -       0
#/dev/sda ATA WDC_SSC-D0128SC-   7 Seek_Error_Rate         0x000b   100   100   050    Pre-fail  Always       -       0
#/dev/sda ATA WDC_SSC-D0128SC-   9 Power_On_Hours          0x0012   100   100   000    Old_age   Always       -       1408
#/dev/sda ATA WDC_SSC-D0128SC-  10 Spin_Retry_Count        0x0013   100   100   050    Pre-fail  Always       -       0
#/dev/sda ATA WDC_SSC-D0128SC-  12 Power_Cycle_Count       0x0012   100   100   000    Old_age   Always       -       523
#/dev/sda ATA WDC_SSC-D0128SC- 168 Unknown_Attribute       0x0012   100   100   000    Old_age   Always       -       1
#/dev/sda ATA WDC_SSC-D0128SC- 175 Program_Fail_Count_Chip 0x0003   100   100   010    Pre-fail  Always       -       0
#/dev/sda ATA WDC_SSC-D0128SC- 192 Power-Off_Retract_Count 0x0012   100   100   000    Old_age   Always       -       0
#/dev/sda ATA WDC_SSC-D0128SC- 194 Temperature_Celsius     0x0022   040   100   000    Old_age   Always       -       40 (Lifetime Min/Max 30/60)
#/dev/sda ATA WDC_SSC-D0128SC- 197 Current_Pending_Sector  0x0012   100   100   000    Old_age   Always       -       0
#/dev/sda ATA WDC_SSC-D0128SC- 240 Head_Flying_Hours       0x0013   100   100   050    Pre-fail  Always       -       0
#/dev/sda ATA WDC_SSC-D0128SC- 170 Unknown_Attribute       0x0003   100   100   010    Pre-fail  Always       -       1769478
#/dev/sda ATA WDC_SSC-D0128SC- 173 Unknown_Attribute       0x0012   100   100   000    Old_age   Always       -       4217788040605

# TODO: Need to completely rework smart check. Use IDs instead of changing
# descriptions! But be careful: There is no standard neither for IDs nor for
# descriptions. Only use those, which are common sense.

factory_settings["smart_temp_default_levels"] = {"levels": (35, 40)}

smart_stats_default_levels = {
    'realloc_events': (1, 1),
    'realloc_sectors': (1, 1),
    'spin_retries': (1, 1),
    'pending_retries': (1, 1),
    'pending_sectors': (1, 1),
    'cmd_timeouts': (5, 10),
    'e2e_errs': (1, 1),
    'uncorr_errs': (1, 1),
    'udma_crcs': (1, 1),
}

smart_stats_fields = [
    'Reallocated_Sector_Ct',
    'Spin_Retry_Count',
    'Reallocated_Event_Count',
    'Current_Pending_Sector',
    'Command_Timeout',
    'End-to-End_Error',
    'Reported_Uncorrect',
    'Uncorrectable_Error_Cnt',
    'UDMA_CRC_Error_Count',
    'CRC_Error_Count',
    #nvme
    'Critical_Warning',
]


def inventory_smart_stats(section):
    for disk_name, disk in section.items():
        cleaned = {f: disk[f] for f in smart_stats_fields if f in disk}
        if cleaned:
            yield disk_name, cleaned


def check_smart_stats(item, params, section):
    # params is a snapshot of all counters at the point of time of inventory
    disk = section.get(item)
    if disk is None:
        return

    for field, descr, renderer in [
        ('Power_On_Hours', 'Powered on', lambda i: "%s hours" % i),
        ('Reported_Uncorrect', 'Uncorrectable errors', str),
        ('Uncorrectable_Error_Cnt', 'Uncorrectable errors', str),
            # Everything from here will go to the details:
        ('Power_Cycle_Count', '\nPower cycles', str),
        ('Reallocated_Sector_Ct', '\nReallocated sectors', str),
        ('Reallocated_Event_Count', '\nReallocated events', str),
        ('Spin_Retry_Count', '\nSpin retries', str),
        ('Current_Pending_Sector', '\nPending sectors', str),
        ('Command_Timeout', '\nCommand timeouts', str),
        ('End-to-End_Error', '\nEnd-to-End errors', str),
        ('UDMA_CRC_Error_Count', '\nUDMA CRC errors', str),
        ('CRC_Error_Count', '\nUDMA CRC errors', str),
            #nvme
        ('Power_Cycles', '\nPower cycles', str),
        ('Critical_Warning', '\nCritical warning', str),
        ('Available_Spare', '\nAvailable spare', get_percent_human_readable),
        ('Percentage_Used', '\nPercentage used', get_percent_human_readable),
        ('Media_and_Data_Integrity_Errors', '\nMedia and data integrity errors', str),
        ('Error_Information_Log_Entries', '\nError information log entries', str),
        ('Data_Units_Read', '\nData units read', get_bytes_human_readable),
        ('Data_Units_Written', '\nData units written', get_bytes_human_readable),
    ]:
        value = disk.get(field)
        if value is None:
            continue

        infotext = "%s: %s" % (descr, renderer(value))

        if field == "Available_Spare":
            ref_value = int(disk.get("Available_Spare_Threshold"))
        else:
            ref_value = params.get(field)

        if ref_value is None:
            yield 0, infotext, [(field, value)]
            continue

        if field == "Available_Spare":
            state = 2 if value < ref_value else 0
        else:
            state = 2 if value > ref_value else 0
        hints = ["during discovery: %d (!!)" % ref_value] if state else []

        # For reallocated event counts we experienced to many reported errors for disks
        # which still seem to be OK. The raw value increased by a small amount but the
        # aggregated value remained at it's initial/ok state. So we use the aggregated
        # value now. Only for this field.
        if field == "Reallocated_Event_Count":
            norm_value, norm_threshold = disk.get(f"_normalized_{field}", (None, None))
            if norm_value is None:
                yield 0, infotext, [(field, value)]
                continue
            hints.append("normalized value: %d" % norm_value)
            if norm_value <= norm_threshold:
                state = 2
                hints[-1] += " (!!)"

        yield state, infotext + " (%s)" % ', '.join(hints) if hints else infotext, [(field, value)]


check_info["smart.stats"] = {
    # section defined in new API!
    'check_function': check_smart_stats,
    'inventory_function': inventory_smart_stats,
    'has_perfdata': True,
    'service_description': 'SMART %s Stats',
}


def inventory_smart_temp(section):
    relevant = {"Temperature_Celsius", "Temperature_Internal", "Temperature"}
    for disk_name, disk in section.items():
        if relevant.intersection(disk):
            yield disk_name, {}


def check_smart_temp(item, params, section):
    data = section.get(item)
    if data is None:
        return

    if "Temperature_Celsius" in data:
        temperature = data["Temperature_Celsius"]
    elif "Temperature_Internal" in data:
        temperature = data["Temperature_Internal"]
    elif "Temperature" in data:
        temperature = data["Temperature"]
    else:
        return

    return check_temperature(temperature, params, "smart_%s" % item)


check_info["smart.temp"] = {
    # section defined in new API!
    'check_function': check_smart_temp,
    'inventory_function': inventory_smart_temp,
    'service_description': 'Temperature SMART %s',
    'group': 'temperature',
    'has_perfdata': True,
    'default_levels_variable': "smart_temp_default_levels"
}
