#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import time
import collections

_FIELD_CASTER_MAP = collections.OrderedDict((
    ('Uptime', int),
    ('IdleWorkers', int),
    ('BusyWorkers', int),
    ('OpenSlots', int),
    ('TotalSlots', int),
    ('Total Accesses', int),
    ('CPULoad', float),
    ('Total kBytes', float),
    ('ReqPerSec', float),
    ('BytesPerReq', float),
    ('BytesPerSec', float),
    ('Scoreboard', str),
    ('ConnsTotal', int),
    ('ConnsAsyncWriting', int),
    ('ConnsAsyncKeepAlive', int),
    ('ConnsAsyncClosing', int),
    ('BusyServers', int),
    ('IdleServers', int),
))

_SCOREBOARD_LABEL_MAP = collections.OrderedDict((
    ('Waiting', '_'),
    ('StartingUp', 'S'),
    ('ReadingRequest', 'R'),
    ('SendingReply', 'W'),
    ('Keepalive', 'K'),
    ('DNS', 'D'),
    ('Closing', 'C'),
    ('Logging', 'L'),
    ('Finishing', 'G'),
    ('IdleCleanup', 'O'),
))


def apache_status_parse_legacy(info):
    # This parse function is required for compatibility with agents older than the 1.6 release.
    data = {}
    for line in info:
        if len(line) != 4 and not (len(line) == 5 and line[2] == 'Total'):
            continue  # Skip unexpected lines
        label = (' '.join(line[2:-1])).rstrip(':')
        caster = _FIELD_CASTER_MAP.get(label)
        if caster is None:
            continue

        address, port = line[:2]
        value = caster(line[-1])
        if port == "None":
            item = address
        else:
            item = '%s:%s' % (address, port)

        if item not in data:
            data[item] = {}

        # Get statistics from scoreboard
        if label == 'Scoreboard':
            for stat_label, key in _SCOREBOARD_LABEL_MAP.items():
                data[item]['State_' + stat_label] = value.count(key)
            data[item]['OpenSlots'] = value.count('.')

        data[item][label] = value

        # Count number of total slots after all needed infos are present
        if 'OpenSlots' in data[item] and 'IdleWorkers' in data[item] \
           and 'BusyWorkers' in data[item]:
            data[item]['TotalSlots'] = data[item]['OpenSlots'] \
                                       + data[item]['IdleWorkers'] \
                                       + data[item]['BusyWorkers']

    return data


def apache_status_parse(info):
    if len(frozenset(len(_) for _ in info)) != 1:
        # The separator was changed in 1.6 so that the elements of `info`
        # have a constant length.
        return apache_status_parse_legacy(info)

    data = collections.defaultdict(dict)
    for address, port, instance, apache_info in info:
        try:
            label, status = apache_info.split(":", 1)
        except ValueError:
            # There is nothing to split.
            continue
        caster = _FIELD_CASTER_MAP.get(label)
        if caster is None:
            # Not a label we handle.
            continue
        value = caster(status)

        if instance and port != "None":
            item = '%s:%s' % (instance, port)
        elif instance:
            item = instance
        elif port != "None":
            item = '%s:%s' % (address, port)
        else:
            item = address

        # Get statistics from scoreboard
        if label == 'Scoreboard':
            for stat_label, key in _SCOREBOARD_LABEL_MAP.items():
                data[item]['State_' + stat_label] = value.count(key)
            data[item]['OpenSlots'] = value.count('.')

        data[item][label] = value

        # Count number of total slots after all needed infos are present
        if 'OpenSlots' in data[item] and 'IdleWorkers' in data[item] \
           and 'BusyWorkers' in data[item]:
            data[item]['TotalSlots'] = data[item]['OpenSlots'] \
                                       + data[item]['IdleWorkers'] \
                                       + data[item]['BusyWorkers']

    return data


def inventory_apache_status(info):
    return [(item, {}) for item in apache_status_parse(info)]


def check_apache_status(item, params, info):
    if params is None:
        params = {}

    if item.endswith(":None"):
        # fix item name discovered before werk 2763
        item = item[:-5]

    data = apache_status_parse(info).get(item)
    if data is None:
        return

    this_time = int(time.time())

    if "Total Accesses" in data:
        data["ReqPerSec"] = get_rate("apache_status_%s_accesses" % item, this_time,
                                     data.pop("Total Accesses"))
    if "Total kBytes" in data:
        data["BytesPerSec"] = get_rate("apache_status_%s_bytes" % item, this_time,
                                       data.pop("Total kBytes") * 1024)

    for key in (k for k in _FIELD_CASTER_MAP if k in data):
        value = data[key]
        levels_to_lower = (None, None) if key == 'OpenSlots' else ()

        # Don't process the scoreboard data directly. Print states instead
        if key == 'Scoreboard':
            states = []
            perfdata = []
            for stat_label in _SCOREBOARD_LABEL_MAP:
                val = data.get('State_' + stat_label, 0)
                if val > 0:
                    states.append('%s: %d' % (stat_label, val))
                perfdata.append(('State_' + stat_label, val))
            yield 0, 'States: (%s)' % ', '.join(states), perfdata
            continue

        renderer = None
        if key == 'Uptime':
            renderer = get_age_human_readable
        elif not isinstance(value, float):
            renderer = lambda i: "%d" % int(i)

        yield check_levels(
            value,
            key.replace(' ', '_'),
            levels_to_lower + params.get(key, (None, None)),
            human_readable_func=renderer,
            infoname=key,
        )


check_info['apache_status'] = {
    "check_function": check_apache_status,
    "inventory_function": inventory_apache_status,
    "service_description": "Apache %s Status",
    "has_perfdata": True,
    "group": "apache_status"
}
